// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pogodeo.DataAccess;

namespace Pogodeo.DataAccess.Migrations
{
    [DbContext(typeof(PogodeoAppDataContext))]
    partial class PogodeoAppDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Pogodeo.DataAccess.AccuWeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("WeatherDayData");

                    b.Property<string>("WeatherHourData");

                    b.HasKey("Id");

                    b.ToTable("AccuWeatherWeather");
                });

            modelBuilder.Entity("Pogodeo.DataAccess.AerisWeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("WeatherDayData");

                    b.Property<string>("WeatherHourData");

                    b.HasKey("Id");

                    b.ToTable("AerisWeatherWeather");
                });

            modelBuilder.Entity("Pogodeo.DataAccess.BigCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccuWeatherLocalizationKey");

                    b.Property<int?>("AccuWeatherWeatherId");

                    b.Property<int?>("AerisWeatherWeatherId");

                    b.Property<string>("CityName");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.HasKey("Id");

                    b.HasIndex("AccuWeatherWeatherId");

                    b.HasIndex("AerisWeatherWeatherId");

                    b.ToTable("BigCitiesData");
                });

            modelBuilder.Entity("Pogodeo.DataAccess.SmallCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssociatedBigCityId");

                    b.Property<string>("CityName");

                    b.Property<string>("Latitude");

                    b.Property<string>("Longitude");

                    b.HasKey("Id");

                    b.HasIndex("AssociatedBigCityId");

                    b.ToTable("SmallCitiesData");
                });

            modelBuilder.Entity("Pogodeo.DataAccess.BigCity", b =>
                {
                    b.HasOne("Pogodeo.DataAccess.AccuWeather", "AccuWeatherWeather")
                        .WithMany("AssociatedBigCity")
                        .HasForeignKey("AccuWeatherWeatherId");

                    b.HasOne("Pogodeo.DataAccess.AerisWeather", "AerisWeatherWeather")
                        .WithMany("AssociatedBigCity")
                        .HasForeignKey("AerisWeatherWeatherId");
                });

            modelBuilder.Entity("Pogodeo.DataAccess.SmallCity", b =>
                {
                    b.HasOne("Pogodeo.DataAccess.BigCity", "AssociatedBigCity")
                        .WithMany("SubordinateCities")
                        .HasForeignKey("AssociatedBigCityId");
                });
#pragma warning restore 612, 618
        }
    }
}
